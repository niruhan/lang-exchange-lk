directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
input addIntroductionInput {
  introductionText: String!
  userId: ID!
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Comment {
  id: ID!
  comment: String!
  author: ID
  post: ID
  createdAt: String
}

type CommentPayload {
  id: ID
  comment: String
  author: UserPayload
  post: PostPayload
  createdAt: String
}

type ConversationsPayload {
  id: ID!
  username: String
  fullName: String
  image: String
  isOnline: Boolean
  seen: Boolean
  lastMessage: String
  lastMessageSender: Boolean
  lastMessageCreatedAt: String
}

input CreateCommentInput {
  comment: String!
  author: ID!
  postId: ID!
}

input CreateFollowInput {
  userId: ID!
  followerId: ID!
}

input CreateLikeInput {
  userId: ID!
  postId: ID!
}

input CreateMessageInput {
  sender: ID!
  receiver: ID!
  message: String!
}

input CreateNotificationInput {
  userId: ID!
  authorId: ID!
  postId: ID
  notificationType: NotificationType!
  notificationTypeId: ID
}

input CreatePostInput {
  title: String
  image: Upload
  imagePublicId: String
  authorId: ID!
  authorNativeLanguage: String
  authorTargetLanguage: String
}

input DeleteCommentInput {
  id: ID!
}

input DeleteFollowInput {
  id: ID!
}

input DeleteLikeInput {
  id: ID!
}

input DeleteNotificationInput {
  id: ID!
}

input DeletePostInput {
  id: ID!
  imagePublicId: String
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

type Follow {
  id: ID!
  user: ID
  follower: ID
}

type IsUserOnlinePayload {
  userId: ID!
  isOnline: Boolean
}

type Like {
  id: ID!
  post: ID
  user: ID
}

type LikePayload {
  id: ID!
  post: PostPayload
  user: UserPayload
}

type Message {
  id: ID!
  sender: User!
  receiver: User!
  message: String!
  createdAt: String
  updateAt: String
}

type MessagePayload {
  id: ID!
  receiver: UserPayload
  sender: UserPayload
  message: String
  seen: Boolean
  createdAt: String
  isFirstMessage: Boolean
}

type Mutation {
  _empty: String
  signin(input: SignInInput!): Token
  signup(input: SignUpInput!): Token
  requestPasswordReset(input: RequestPasswordResetInput!): SuccessMessage
  addIntroduction(input: addIntroductionInput!): SuccessMessage
  resetPassword(input: ResetPasswordInput!): Token
  uploadUserPhoto(input: UploadUserPhotoInput!): UserPayload
  updateAccountInfo(input: UpdateInfoInput!): SuccessMessage
  createPost(input: CreatePostInput!): PostPayload
  deletePost(input: DeletePostInput!): PostPayload
  createMessage(input: CreateMessageInput!): MessagePayload
  updateMessageSeen(input: UpdateMessageSeenInput!): Boolean
  createFollow(input: CreateFollowInput!): Follow
  deleteFollow(input: DeleteFollowInput!): Follow
  createLike(input: CreateLikeInput!): Like
  deleteLike(input: DeleteLikeInput!): Like
  createComment(input: CreateCommentInput!): Comment
  deleteComment(input: DeleteCommentInput!): Comment
  createNotification(input: CreateNotificationInput!): Notification
  deleteNotification(input: DeleteNotificationInput!): Notification
  updateNotificationSeen(input: UpdateNotificationSeenInput!): Boolean
}

type Notification {
  id: ID!
  user: User
  author: User
  post: ID!
  like: Like
  follow: Follow
  comment: Comment
  type: NotificationType
  seen: Boolean
  createdAt: String
}

type NotificationCreatedOrDeletedPayload {
  operation: NotificationOperationType!
  notification: NotificationPayload
}

enum NotificationOperationType {
  CREATE
  DELETE
}

type NotificationPayload {
  id: ID
  user: UserPayload
  author: UserPayload
  like: LikePayload
  follow: Follow
  comment: CommentPayload
  createdAt: String
}

type NotificationsPayload {
  count: String!
  notifications: [NotificationPayload]!
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

type Post {
  id: ID!
  title: String
  image: File
  imagePublicId: String
  author: User!
  authorNativeLanguage: String
  authorTargetLanguage: String
  likes: [Like]
  comments: [Comment]
  createdAt: String
  updatedAt: String
}

type PostPayload {
  id: ID!
  title: String
  image: String
  imagePublicId: String
  author: UserPayload!
  authorNativeLanguage: String
  authorTargetLanguage: String
  likes: [Like]
  comments: [CommentPayload]
  createdAt: String
  updatedAt: String
}

type PostsPayload {
  posts: [PostPayload]!
  count: String!
}

type Query {
  _empty: String
  verifyResetPasswordToken(email: String, token: String!): SuccessMessage
  getAuthUser: UserPayload
  getUser(username: String, id: ID): UserPayload
  getUsers(userId: String!, skip: Int, limit: Int): UsersPayload
  getPotentialPartners(
    userId: String!
    city: String
    skip: Int
    limit: Int
  ): UsersPayload
  searchUsers(searchQuery: String!): [UserPayload]
  suggestLearners(userId: String!): [UserPayload]
  getUserPosts(username: String!, skip: Int, limit: Int): UserPostsPayload
  getFollowedPosts(userId: String!, skip: Int, limit: Int): PostsPayload
  getExplorePosts(
    authUserId: ID!
    nativeLanguage: String!
    targetLanguage: String!
    skip: Int
    limit: Int
  ): PostsPayload
  getForumPosts(
    authUserId: ID!
    targetLanguage: String!
    skip: Int
    limit: Int
  ): PostsPayload
  getPost(id: ID!): PostPayload
  getMessages(authUserId: ID!, userId: ID!): [MessagePayload]
  getConversations(authUserId: ID!): [ConversationsPayload]
  getUserNotifications(userId: ID!, skip: Int, limit: Int): NotificationsPayload
}

input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  email: String!
  token: String!
  password: String!
}

input SignInInput {
  emailOrUsername: String!
  password: String
}

input SignUpInput {
  email: String!
  username: String!
  fullName: String!
  password: String!
  nativeLanguage: String!
  targetLanguage: String!
}

type Subscription {
  _empty: String
  isUserOnline(authUserId: ID!, userId: ID!): IsUserOnlinePayload
  messageCreated(authUserId: ID!, userId: ID!): MessagePayload
  newConversation: ConversationsPayload
  notificationCreatedOrDeleted: NotificationCreatedOrDeletedPayload
}

type SuccessMessage {
  message: String!
}

type Token {
  token: String!
}

input UpdateInfoInput {
  id: ID!
  fullName: String
  email: String
  nativeLanguage: String
  targetLanguage: String
  introduction: String
  age: String
  sex: String
  city: String
}

input UpdateMessageSeenInput {
  sender: ID
  receiver: ID!
}

input UpdateNotificationSeenInput {
  userId: ID!
}

# The `Upload` scalar type
 represents a file upload.
scalar Upload

input UploadUserPhotoInput {
  id: ID!
  image: Upload!
  imagePublicId: String
  isCover: Boolean
}

type User {
  id: ID!
  fullName: String!
  email: String!
  username: String!
  password: String!
  nativeLanguage: String!
  targetLanguage: String!
  introduction: String
  age: Int
  sex: String
  city: String
  resetToken: String
  resetTokenExpiry: String
  image: File
  imagePublicId: String
  coverImage: File
  coverImagePublicId: String
  isOnline: Boolean
  posts: [PostPayload]
  likes: [Like]
  comments: [Comment]
  followers: [Follow]
  following: [Follow]
  notifications: [NotificationPayload]
  createdAt: String
  updatedAt: String
}

type UserPayload {
  id: ID!
  fullName: String
  email: String
  username: String
  password: String
  nativeLanguage: String
  targetLanguage: String
  introduction: String
  age: Int
  sex: String
  city: String
  image: String
  imagePublicId: String
  coverImage: String
  coverImagePublicId: String
  isOnline: Boolean
  posts: [PostPayload]
  likes: [Like]
  followers: [Follow]
  following: [Follow]
  notifications: [NotificationPayload]
  newNotifications: [NotificationPayload]
  newConversations: [ConversationsPayload]
  unseenMessage: Boolean
  createdAt: String
  updatedAt: String
}

type UserPostsPayload {
  posts: [PostPayload]!
  count: String!
}

type UsersPayload {
  users: [UserPayload]!
  count: String!
}

