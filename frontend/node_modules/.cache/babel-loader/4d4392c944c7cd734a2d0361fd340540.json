{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/niruhan/MSc/source_code/new/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($input: DeletePostInput!) {\\n    deletePost(input: $input) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  query($id: ID!) {\\n    getPost(id: $id) {\\n      id\\n      title\\n      image\\n      createdAt\\n      \", \"\\n      \", \"\\n      \", \"\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query($authUserId: ID!, $skip: Int, $limit: Int) {\\n    getPosts(authUserId: $authUserId, skip: $skip, limit: $limit) {\\n      count\\n      posts {\\n        id\\n        title\\n        image\\n        \", \"\\n        \", \"\\n        \", \"\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query($userId: String!, $skip: Int, $limit: Int) {\\n    getFollowedPosts(userId: $userId, skip: $skip, limit: $limit) {\\n      count\\n      posts {\\n        id\\n        title\\n        image\\n        imagePublicId\\n        createdAt\\n        \", \"\\n        \", \"\\n        \", \"\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($input: CreatePostInput!) {\\n    createPost(input: $input) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\n/**\n * Records to select from post comments\n */\n\nexport var postCommentsPayload = \"\\n  comments {\\n    id\\n    comment\\n    author {\\n      id\\n      username\\n      fullName\\n      image\\n    }\\n  }\\n\";\n/**\n * Records to select from post author\n */\n\nexport var postAuthorPayload = \"\\n  author {\\n    id\\n    username\\n    fullName\\n    image\\n    following {\\n      id\\n      user\\n    }\\n    followers {\\n      id\\n      user\\n    }\\n    notifications {\\n      id\\n      author {\\n        id\\n        username\\n      }\\n      follow {\\n        id\\n      }\\n      like {\\n        id\\n      }\\n      comment {\\n        id\\n      }\\n    }\\n  }\\n\";\n/**\n * Records to select from post likes\n */\n\nexport var postLikesPayload = \"\\n  likes {\\n    id\\n    user\\n    post\\n  }\\n\";\n/**\n * Creates a post\n */\n\nexport var CREATE_POST = gql(_templateObject());\n/**\n * Gets all posts from followed users\n */\n\nexport var GET_FOLLOWED_POSTS = gql(_templateObject2(), postAuthorPayload, postCommentsPayload, postLikesPayload);\n/**\n * Gets all available posts\n */\n\nexport var GET_POSTS = gql(_templateObject3(), postAuthorPayload, postCommentsPayload, postLikesPayload);\n/**\n * Gets specific post by id\n */\n\nexport var GET_POST = gql(_templateObject4(), postAuthorPayload, postCommentsPayload, postLikesPayload);\n/**\n * Deletes a post\n */\n\nexport var DELETE_POST = gql(_templateObject5());","map":{"version":3,"sources":["/Users/niruhan/MSc/source_code/new/lang-exchange-lk/frontend/src/graphql/post.js"],"names":["gql","postCommentsPayload","postAuthorPayload","postLikesPayload","CREATE_POST","GET_FOLLOWED_POSTS","GET_POSTS","GET_POST","DELETE_POST"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA;;;;AAGA,OAAO,IAAMC,mBAAmB,2HAAzB;AAaP;;;;AAGA,OAAO,IAAMC,iBAAiB,8WAAvB;AAiCP;;;;AAGA,OAAO,IAAMC,gBAAgB,mDAAtB;AAQP;;;;AAGA,OAAO,IAAMC,WAAW,GAAGJ,GAAH,mBAAjB;AAQP;;;;AAGA,OAAO,IAAMK,kBAAkB,GAAGL,GAAH,qBAUrBE,iBAVqB,EAWrBD,mBAXqB,EAYrBE,gBAZqB,CAAxB;AAkBP;;;;AAGA,OAAO,IAAMG,SAAS,GAAGN,GAAH,qBAQZE,iBARY,EASZD,mBATY,EAUZE,gBAVY,CAAf;AAgBP;;;;AAGA,OAAO,IAAMI,QAAQ,GAAGP,GAAH,qBAObE,iBAPa,EAQbD,mBARa,EASbE,gBATa,CAAd;AAcP;;;;AAGA,OAAO,IAAMK,WAAW,GAAGR,GAAH,oBAAjB","sourcesContent":["import gql from 'graphql-tag';\n\n/**\n * Records to select from post comments\n */\nexport const postCommentsPayload = `\n  comments {\n    id\n    comment\n    author {\n      id\n      username\n      fullName\n      image\n    }\n  }\n`;\n\n/**\n * Records to select from post author\n */\nexport const postAuthorPayload = `\n  author {\n    id\n    username\n    fullName\n    image\n    following {\n      id\n      user\n    }\n    followers {\n      id\n      user\n    }\n    notifications {\n      id\n      author {\n        id\n        username\n      }\n      follow {\n        id\n      }\n      like {\n        id\n      }\n      comment {\n        id\n      }\n    }\n  }\n`;\n\n/**\n * Records to select from post likes\n */\nexport const postLikesPayload = `\n  likes {\n    id\n    user\n    post\n  }\n`;\n\n/**\n * Creates a post\n */\nexport const CREATE_POST = gql`\n  mutation($input: CreatePostInput!) {\n    createPost(input: $input) {\n      id\n    }\n  }\n`;\n\n/**\n * Gets all posts from followed users\n */\nexport const GET_FOLLOWED_POSTS = gql`\n  query($userId: String!, $skip: Int, $limit: Int) {\n    getFollowedPosts(userId: $userId, skip: $skip, limit: $limit) {\n      count\n      posts {\n        id\n        title\n        image\n        imagePublicId\n        createdAt\n        ${postAuthorPayload}\n        ${postCommentsPayload}\n        ${postLikesPayload}\n      }\n    }\n  }\n`;\n\n/**\n * Gets all available posts\n */\nexport const GET_POSTS = gql`\n  query($authUserId: ID!, $skip: Int, $limit: Int) {\n    getPosts(authUserId: $authUserId, skip: $skip, limit: $limit) {\n      count\n      posts {\n        id\n        title\n        image\n        ${postAuthorPayload}\n        ${postCommentsPayload}\n        ${postLikesPayload}\n      }\n    }\n  }\n`;\n\n/**\n * Gets specific post by id\n */\nexport const GET_POST = gql`\n  query($id: ID!) {\n    getPost(id: $id) {\n      id\n      title\n      image\n      createdAt\n      ${postAuthorPayload}\n      ${postCommentsPayload}\n      ${postLikesPayload}\n    }\n  }\n`;\n\n/**\n * Deletes a post\n */\nexport const DELETE_POST = gql`\n  mutation($input: DeletePostInput!) {\n    deletePost(input: $input) {\n      id\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}