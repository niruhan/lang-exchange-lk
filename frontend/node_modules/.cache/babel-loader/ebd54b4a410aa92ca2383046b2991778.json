{"ast":null,"code":"import _slicedToArray from \"/Users/niruhan/MSc/source_code/new/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/niruhan/MSc/source_code/new/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/niruhan/MSc/source_code/new/lang-exchange-lk/frontend/src/pages/Explore/Explore.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, minmax(260px, 3fr));\\n  grid-auto-rows: auto;\\n  grid-gap: 20px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: \", \";\\n  margin-bottom: \", \";\\n\\n  @media (min-width: \", \") {\\n    margin-left: \", \";\\n    padding: 0;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, Fragment } from 'react';\nimport styled from 'styled-components';\nimport { generatePath } from 'react-router-dom';\nimport { Query } from 'react-apollo';\nimport { Container } from 'components/Layout';\nimport ExploreCard from './ExploreCard';\nimport Skeleton from 'components/Skeleton';\nimport PostPopup from 'components/PostPopup';\nimport Modal from 'components/Modal';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Empty from 'components/Empty';\nimport { Loading } from 'components/Loading';\nimport Head from 'components/Head';\nimport { GET_POSTS } from 'graphql/post';\nimport { EXPLORE_PAGE_POSTS_LIMIT } from 'constants/DataLimit';\nimport { useStore } from 'store';\nimport * as Routes from 'routes';\nvar Root = styled(Container)(_templateObject(), function (p) {\n  return p.theme.spacing.lg;\n}, function (p) {\n  return p.theme.spacing.sm;\n}, function (p) {\n  return p.theme.screen.lg;\n}, function (p) {\n  return p.theme.spacing.lg;\n});\nvar PostsContainer = styled.div(_templateObject2());\n/**\n * Explore page\n */\n\nvar Explore = function Explore() {\n  var _useStore = useStore(),\n      _useStore2 = _slicedToArray(_useStore, 1),\n      auth = _useStore2[0].auth;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalPostId = _useState2[0],\n      setModalPostId = _useState2[1];\n\n  var closeModal = function closeModal() {\n    window.history.pushState('', '', '/explore');\n    setModalPostId(null);\n  };\n\n  var openModal = function openModal(postId) {\n    window.history.pushState('', '', generatePath(Routes.POST, {\n      id: postId\n    }));\n    setModalPostId(postId);\n  };\n\n  var variables = {\n    authUserId: auth.user.id,\n    skip: 0,\n    limit: EXPLORE_PAGE_POSTS_LIMIT\n  };\n  return React.createElement(Root, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Head, {\n    title: \"Explore New Posts and Users\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Query, {\n    query: GET_POSTS,\n    variables: variables,\n    notifyOnNetworkStatusChange: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        fetchMore = _ref.fetchMore,\n        networkStatus = _ref.networkStatus;\n\n    if (loading && networkStatus === 1) {\n      return React.createElement(PostsContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Skeleton, {\n        height: 300,\n        count: EXPLORE_PAGE_POSTS_LIMIT,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    }\n\n    var _data$getPosts = data.getPosts,\n        posts = _data$getPosts.posts,\n        count = _data$getPosts.count;\n    if (!posts.length > 0) return React.createElement(Empty, {\n      text: \"No posts yet.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    });\n    return React.createElement(InfiniteScroll, {\n      data: posts,\n      dataKey: \"getPosts.posts\",\n      count: parseInt(count),\n      variables: variables,\n      fetchMore: fetchMore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, function (data) {\n      var showNextLoading = loading && networkStatus === 3 && count !== data.length;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(PostsContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, data.map(function (post) {\n        return React.createElement(Fragment, {\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(Modal, {\n          open: modalPostId === post.id,\n          onClose: closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(PostPopup, {\n          id: post.id,\n          closeModal: closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        })), React.createElement(ExploreCard, {\n          image: post.image,\n          countLikes: post.likes.length,\n          countComments: post.comments.length,\n          openPostPopup: function openPostPopup() {\n            return openModal(post.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }));\n      })), showNextLoading && React.createElement(Loading, {\n        top: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }));\n    });\n  }));\n};\n\nexport default Explore;","map":{"version":3,"sources":["/Users/niruhan/MSc/source_code/new/lang-exchange-lk/frontend/src/pages/Explore/Explore.js"],"names":["React","useState","Fragment","styled","generatePath","Query","Container","ExploreCard","Skeleton","PostPopup","Modal","InfiniteScroll","Empty","Loading","Head","GET_POSTS","EXPLORE_PAGE_POSTS_LIMIT","useStore","Routes","Root","p","theme","spacing","lg","sm","screen","PostsContainer","div","Explore","auth","modalPostId","setModalPostId","closeModal","window","history","pushState","openModal","postId","POST","id","variables","authUserId","user","skip","limit","data","loading","fetchMore","networkStatus","getPosts","posts","count","length","parseInt","showNextLoading","map","post","image","likes","comments"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,wBAAT,QAAyC,qBAAzC;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AAEA,IAAMC,IAAI,GAAGhB,MAAM,CAACG,SAAD,CAAT,oBACM,UAAAc,CAAC;AAAA,SAAIA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAApB;AAAA,CADP,EAES,UAAAH,CAAC;AAAA,SAAIA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBE,EAApB;AAAA,CAFV,EAIa,UAAAJ,CAAC;AAAA,SAAIA,CAAC,CAACC,KAAF,CAAQI,MAAR,CAAeF,EAAnB;AAAA,CAJd,EAKS,UAAAH,CAAC;AAAA,SAAIA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAApB;AAAA,CALV,CAAV;AAUA,IAAMG,cAAc,GAAGvB,MAAM,CAACwB,GAAV,oBAApB;AAOA;;;;AAGA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA,kBACDX,QAAQ,EADP;AAAA;AAAA,MACXY,IADW,iBACXA,IADW;;AAAA,kBAGkB5B,QAAQ,CAAC,IAAD,CAH1B;AAAA;AAAA,MAGb6B,WAHa;AAAA,MAGAC,cAHA;;AAKpB,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBC,IAAAA,MAAM,CAACC,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,EAA7B,EAAiC,UAAjC;AACAJ,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAHD;;AAKA,MAAMK,SAAS,GAAG,SAAZA,SAAY,CAAAC,MAAM,EAAI;AAC1BJ,IAAAA,MAAM,CAACC,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,EAA7B,EAAiC/B,YAAY,CAACc,MAAM,CAACoB,IAAR,EAAc;AAAEC,MAAAA,EAAE,EAAEF;AAAN,KAAd,CAA7C;AACAN,IAAAA,cAAc,CAACM,MAAD,CAAd;AACD,GAHD;;AAKA,MAAMG,SAAS,GAAG;AAChBC,IAAAA,UAAU,EAAEZ,IAAI,CAACa,IAAL,CAAUH,EADN;AAEhBI,IAAAA,IAAI,EAAE,CAFU;AAGhBC,IAAAA,KAAK,EAAE5B;AAHS,GAAlB;AAMA,SACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAC,6BAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAED,SADT;AAEE,IAAA,SAAS,EAAEyB,SAFb;AAGE,IAAA,2BAA2B,MAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,gBAAiD;AAAA,QAA9CK,IAA8C,QAA9CA,IAA8C;AAAA,QAAxCC,OAAwC,QAAxCA,OAAwC;AAAA,QAA/BC,SAA+B,QAA/BA,SAA+B;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;;AAChD,QAAIF,OAAO,IAAIE,aAAa,KAAK,CAAjC,EAAoC;AAClC,aACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,GAAlB;AAAuB,QAAA,KAAK,EAAEhC,wBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;AAP+C,yBASvB6B,IAAI,CAACI,QATkB;AAAA,QASxCC,KATwC,kBASxCA,KATwC;AAAA,QASjCC,KATiC,kBASjCA,KATiC;AAWhD,QAAI,CAACD,KAAK,CAACE,MAAP,GAAgB,CAApB,EAAuB,OAAO,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEvB,WACE,oBAAC,cAAD;AACE,MAAA,IAAI,EAAEF,KADR;AAEE,MAAA,OAAO,EAAC,gBAFV;AAGE,MAAA,KAAK,EAAEG,QAAQ,CAACF,KAAD,CAHjB;AAIE,MAAA,SAAS,EAAEX,SAJb;AAKE,MAAA,SAAS,EAAEO,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,UAAAF,IAAI,EAAI;AACP,UAAMS,eAAe,GACnBR,OAAO,IAAIE,aAAa,KAAK,CAA7B,IAAkCG,KAAK,KAAKN,IAAI,CAACO,MADnD;AAGA,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGP,IAAI,CAACU,GAAL,CAAS,UAAAC,IAAI;AAAA,eACZ,oBAAC,QAAD;AAAU,UAAA,GAAG,EAAEA,IAAI,CAACjB,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AACE,UAAA,IAAI,EAAET,WAAW,KAAK0B,IAAI,CAACjB,EAD7B;AAEE,UAAA,OAAO,EAAEP,UAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIE,oBAAC,SAAD;AAAW,UAAA,EAAE,EAAEwB,IAAI,CAACjB,EAApB;AAAwB,UAAA,UAAU,EAAEP,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,CADF,EAQE,oBAAC,WAAD;AACE,UAAA,KAAK,EAAEwB,IAAI,CAACC,KADd;AAEE,UAAA,UAAU,EAAED,IAAI,CAACE,KAAL,CAAWN,MAFzB;AAGE,UAAA,aAAa,EAAEI,IAAI,CAACG,QAAL,CAAcP,MAH/B;AAIE,UAAA,aAAa,EAAE;AAAA,mBAAMhB,SAAS,CAACoB,IAAI,CAACjB,EAAN,CAAf;AAAA,WAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UARF,CADY;AAAA,OAAb,CADH,CADF,EAqBGe,eAAe,IAAI,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBtB,CADF;AAyBD,KApCH,CADF;AAwCD,GA1DH,CAHF,CADF;AAkED,CAvFD;;AAyFA,eAAe1B,OAAf","sourcesContent":["import React, { useState, Fragment } from 'react';\nimport styled from 'styled-components';\nimport { generatePath } from 'react-router-dom';\nimport { Query } from 'react-apollo';\n\nimport { Container } from 'components/Layout';\nimport ExploreCard from './ExploreCard';\nimport Skeleton from 'components/Skeleton';\nimport PostPopup from 'components/PostPopup';\nimport Modal from 'components/Modal';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Empty from 'components/Empty';\nimport { Loading } from 'components/Loading';\nimport Head from 'components/Head';\n\nimport { GET_POSTS } from 'graphql/post';\n\nimport { EXPLORE_PAGE_POSTS_LIMIT } from 'constants/DataLimit';\n\nimport { useStore } from 'store';\n\nimport * as Routes from 'routes';\n\nconst Root = styled(Container)`\n  margin-top: ${p => p.theme.spacing.lg};\n  margin-bottom: ${p => p.theme.spacing.sm};\n\n  @media (min-width: ${p => p.theme.screen.lg}) {\n    margin-left: ${p => p.theme.spacing.lg};\n    padding: 0;\n  }\n`;\n\nconst PostsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(260px, 3fr));\n  grid-auto-rows: auto;\n  grid-gap: 20px;\n`;\n\n/**\n * Explore page\n */\nconst Explore = () => {\n  const [{ auth }] = useStore();\n\n  const [modalPostId, setModalPostId] = useState(null);\n\n  const closeModal = () => {\n    window.history.pushState('', '', '/explore');\n    setModalPostId(null);\n  };\n\n  const openModal = postId => {\n    window.history.pushState('', '', generatePath(Routes.POST, { id: postId }));\n    setModalPostId(postId);\n  };\n\n  const variables = {\n    authUserId: auth.user.id,\n    skip: 0,\n    limit: EXPLORE_PAGE_POSTS_LIMIT,\n  };\n\n  return (\n    <Root maxWidth=\"md\">\n      <Head title=\"Explore New Posts and Users\" />\n\n      <Query\n        query={GET_POSTS}\n        variables={variables}\n        notifyOnNetworkStatusChange\n      >\n        {({ data, loading, fetchMore, networkStatus }) => {\n          if (loading && networkStatus === 1) {\n            return (\n              <PostsContainer>\n                <Skeleton height={300} count={EXPLORE_PAGE_POSTS_LIMIT} />\n              </PostsContainer>\n            );\n          }\n\n          const { posts, count } = data.getPosts;\n\n          if (!posts.length > 0) return <Empty text=\"No posts yet.\" />;\n\n          return (\n            <InfiniteScroll\n              data={posts}\n              dataKey=\"getPosts.posts\"\n              count={parseInt(count)}\n              variables={variables}\n              fetchMore={fetchMore}\n            >\n              {data => {\n                const showNextLoading =\n                  loading && networkStatus === 3 && count !== data.length;\n\n                return (\n                  <Fragment>\n                    <PostsContainer>\n                      {data.map(post => (\n                        <Fragment key={post.id}>\n                          <Modal\n                            open={modalPostId === post.id}\n                            onClose={closeModal}\n                          >\n                            <PostPopup id={post.id} closeModal={closeModal} />\n                          </Modal>\n\n                          <ExploreCard\n                            image={post.image}\n                            countLikes={post.likes.length}\n                            countComments={post.comments.length}\n                            openPostPopup={() => openModal(post.id)}\n                          />\n                        </Fragment>\n                      ))}\n                    </PostsContainer>\n\n                    {showNextLoading && <Loading top=\"lg\" />}\n                  </Fragment>\n                );\n              }}\n            </InfiniteScroll>\n          );\n        }}\n      </Query>\n    </Root>\n  );\n};\n\nexport default Explore;\n"]},"metadata":{},"sourceType":"module"}