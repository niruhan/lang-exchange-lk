{"ast":null,"code":"import _slicedToArray from \"/Users/niruhan/MSc/source_code/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/niruhan/MSc/source_code/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/niruhan/MSc/source_code/lang-exchange-lk/frontend/src/pages/Notifications/Notifications.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  border-radius: \", \";\\n  border: 1px solid \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Query } from 'react-apollo';\nimport { Container, Content } from 'components/Layout';\nimport { Loading } from 'components/Loading';\nimport Skeleton from 'components/Skeleton';\nimport Notification from 'components/App/Notification';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Empty from 'components/Empty';\nimport Head from 'components/Head';\nimport { useStore } from 'store';\nimport { GET_USER_NOTIFICATION } from 'graphql/notification';\nimport { NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT } from 'constants/DataLimit';\nvar Root = styled(Container)(_templateObject(), function (p) {\n  return p.theme.spacing.lg;\n});\nvar List = styled.div(_templateObject2(), function (p) {\n  return p.theme.radius.sm;\n}, function (p) {\n  return p.theme.colors.border.main;\n});\n/**\n * Notifications page\n */\n\nvar Notifications = function Notifications() {\n  var _useStore = useStore(),\n      _useStore2 = _slicedToArray(_useStore, 1),\n      auth = _useStore2[0].auth;\n\n  var variables = {\n    userId: auth.user.id,\n    skip: 0,\n    limit: NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT\n  };\n  return React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Root, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Head, {\n    title: \"\".concat(auth.user.username, \"'s Notifications\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(Query, {\n    query: GET_USER_NOTIFICATION,\n    variables: variables,\n    notifyOnNetworkStatusChange: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        fetchMore = _ref.fetchMore,\n        networkStatus = _ref.networkStatus;\n\n    if (loading && networkStatus === 1) {\n      return React.createElement(Skeleton, {\n        height: 56,\n        bottom: \"xxs\",\n        count: NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }\n\n    var _data$getUserNotifica = data.getUserNotifications,\n        notifications = _data$getUserNotifica.notifications,\n        count = _data$getUserNotifica.count;\n\n    if (!notifications.length) {\n      return React.createElement(Empty, {\n        text: \"No notifications yet.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(InfiniteScroll, {\n      data: notifications,\n      dataKey: \"getUserNotifications.notifications\",\n      count: parseInt(count),\n      variables: variables,\n      fetchMore: fetchMore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, function (data) {\n      var showNextLoading = loading && networkStatus === 3 && count !== data.length;\n      return React.createElement(React.Fragment, null, React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, data.map(function (notification) {\n        return React.createElement(Notification, {\n          key: notification.id,\n          notification: notification,\n          close: function close() {\n            return false;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n      })), showNextLoading && React.createElement(Loading, {\n        top: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    });\n  })));\n};\n\nexport default Notifications;","map":{"version":3,"sources":["/Users/niruhan/MSc/source_code/lang-exchange-lk/frontend/src/pages/Notifications/Notifications.js"],"names":["React","styled","Query","Container","Content","Loading","Skeleton","Notification","InfiniteScroll","Empty","Head","useStore","GET_USER_NOTIFICATION","NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT","Root","p","theme","spacing","lg","List","div","radius","sm","colors","border","main","Notifications","auth","variables","userId","user","id","skip","limit","username","data","loading","fetchMore","networkStatus","getUserNotifications","notifications","count","length","parseInt","showNextLoading","map","notification"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Query } from 'react-apollo';\n\nimport { Container, Content } from 'components/Layout';\nimport { Loading } from 'components/Loading';\nimport Skeleton from 'components/Skeleton';\nimport Notification from 'components/App/Notification';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Empty from 'components/Empty';\nimport Head from 'components/Head';\n\nimport { useStore } from 'store';\n\nimport { GET_USER_NOTIFICATION } from 'graphql/notification';\n\nimport { NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT } from 'constants/DataLimit';\n\nconst Root = styled(Container)`\n  margin-top: ${p => p.theme.spacing.lg};\n`;\n\nconst List = styled.div`\n  overflow: hidden;\n  border-radius: ${p => p.theme.radius.sm};\n  border: 1px solid ${p => p.theme.colors.border.main};\n`;\n\n/**\n * Notifications page\n */\nconst Notifications = () => {\n  const [{ auth }] = useStore();\n\n  const variables = {\n    userId: auth.user.id,\n    skip: 0,\n    limit: NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT,\n  };\n\n  return (\n    <Content>\n      <Root maxWidth=\"md\">\n        <Head title={`${auth.user.username}'s Notifications`} />\n\n        <Query\n          query={GET_USER_NOTIFICATION}\n          variables={variables}\n          notifyOnNetworkStatusChange\n        >\n          {({ data, loading, fetchMore, networkStatus }) => {\n            if (loading && networkStatus === 1) {\n              return (\n                <Skeleton\n                  height={56}\n                  bottom=\"xxs\"\n                  count={NOTIFICATIONS_PAGE_NOTIFICATION_LIMIT}\n                />\n              );\n            }\n\n            const { notifications, count } = data.getUserNotifications;\n\n            if (!notifications.length) {\n              return <Empty text=\"No notifications yet.\" />;\n            }\n\n            return (\n              <InfiniteScroll\n                data={notifications}\n                dataKey=\"getUserNotifications.notifications\"\n                count={parseInt(count)}\n                variables={variables}\n                fetchMore={fetchMore}\n              >\n                {data => {\n                  const showNextLoading =\n                    loading && networkStatus === 3 && count !== data.length;\n\n                  return (\n                    <>\n                      <List>\n                        {data.map(notification => (\n                          <Notification\n                            key={notification.id}\n                            notification={notification}\n                            close={() => false}\n                          />\n                        ))}\n                      </List>\n\n                      {showNextLoading && <Loading top=\"lg\" />}\n                    </>\n                  );\n                }}\n              </InfiniteScroll>\n            );\n          }}\n        </Query>\n      </Root>\n    </Content>\n  );\n};\n\nexport default Notifications;\n"]},"metadata":{},"sourceType":"module"}