{"ast":null,"code":"import _slicedToArray from \"/Users/niruhan/MSc/source_code/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/niruhan/MSc/source_code/lang-exchange-lk/frontend/src/pages/Profile/ProfilePosts.js\";\nimport React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { generatePath } from 'react-router-dom';\nimport Skeleton from 'components/Skeleton';\nimport Modal from 'components/Modal';\nimport PostPopup from 'components/PostPopup';\nimport PostCard from 'components/PostCard';\nimport { Spacing } from 'components/Layout';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport { Loading } from 'components/Loading';\nimport Empty from 'components/Empty';\nimport { PROFILE_PAGE_POSTS_LIMIT } from 'constants/DataLimit';\nimport { GET_USER_POSTS } from 'graphql/user';\nimport * as Routes from 'routes';\n/**\n * Renders posts in profile page\n */\n\nvar ProfilePosts = function ProfilePosts(_ref) {\n  var username = _ref.username;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPostPopupOpen = _useState2[0],\n      setIsPostPopupOpen = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalPostId = _useState4[0],\n      setModalPostId = _useState4[1];\n\n  var _openModal = function openModal(postId) {\n    window.history.pushState('', '', generatePath(Routes.POST, {\n      id: postId\n    }));\n    setModalPostId(postId);\n    setIsPostPopupOpen(true);\n  };\n\n  var closeModal = function closeModal() {\n    window.history.pushState('', '', generatePath(Routes.USER_PROFILE, {\n      username: username\n    }));\n    setIsPostPopupOpen(false);\n  };\n\n  var variables = {\n    username: username,\n    skip: 0,\n    limit: PROFILE_PAGE_POSTS_LIMIT\n  };\n  return React.createElement(Query, {\n    query: GET_USER_POSTS,\n    variables: variables,\n    notifyOnNetworkStatusChange: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, function (_ref2) {\n    var data = _ref2.data,\n        loading = _ref2.loading,\n        fetchMore = _ref2.fetchMore,\n        networkStatus = _ref2.networkStatus;\n\n    if (loading && networkStatus === 1) {\n      return React.createElement(Skeleton, {\n        height: 500,\n        bottom: \"lg\",\n        top: \"lg\",\n        count: PROFILE_PAGE_POSTS_LIMIT,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }\n\n    var _data$getUserPosts = data.getUserPosts,\n        posts = _data$getUserPosts.posts,\n        count = _data$getUserPosts.count;\n\n    if (!posts.length > 0) {\n      return React.createElement(Spacing, {\n        bottom: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Empty, {\n        text: \"No posts yet.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    }\n\n    return React.createElement(InfiniteScroll, {\n      data: posts,\n      dataKey: \"getUserPosts.posts\",\n      count: parseInt(count),\n      variables: variables,\n      fetchMore: fetchMore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, function (data) {\n      return data.map(function (post, i) {\n        var showNextLoading = loading && networkStatus === 3 && data.length - 1 === i;\n        return React.createElement(Fragment, {\n          key: post.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, modalPostId === post.id && React.createElement(Modal, {\n          open: isPostPopupOpen,\n          onClose: closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(PostPopup, {\n          id: post.id,\n          closeModal: closeModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        })), React.createElement(Spacing, {\n          bottom: \"lg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(PostCard, {\n          author: post.author,\n          postId: post.id,\n          imagePublicId: post.imagePublicId,\n          comments: post.comments,\n          title: post.title,\n          image: post.image,\n          likes: post.likes,\n          createdAt: post.createdAt,\n          openModal: function openModal() {\n            return _openModal(post.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        })), showNextLoading && React.createElement(Loading, {\n          top: \"lg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }));\n      });\n    });\n  });\n};\n\nProfilePosts.propTypes = {\n  username: PropTypes.string.isRequired\n};\nexport default ProfilePosts;","map":{"version":3,"sources":["/Users/niruhan/MSc/source_code/lang-exchange-lk/frontend/src/pages/Profile/ProfilePosts.js"],"names":["React","Fragment","useState","PropTypes","Query","generatePath","Skeleton","Modal","PostPopup","PostCard","Spacing","InfiniteScroll","Loading","Empty","PROFILE_PAGE_POSTS_LIMIT","GET_USER_POSTS","Routes","ProfilePosts","username","isPostPopupOpen","setIsPostPopupOpen","modalPostId","setModalPostId","openModal","postId","window","history","pushState","POST","id","closeModal","USER_PROFILE","variables","skip","limit","data","loading","fetchMore","networkStatus","getUserPosts","posts","count","length","parseInt","map","post","i","showNextLoading","author","imagePublicId","comments","title","image","likes","createdAt","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport { generatePath } from 'react-router-dom';\n\nimport Skeleton from 'components/Skeleton';\nimport Modal from 'components/Modal';\nimport PostPopup from 'components/PostPopup';\nimport PostCard from 'components/PostCard';\nimport { Spacing } from 'components/Layout';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport { Loading } from 'components/Loading';\nimport Empty from 'components/Empty';\n\nimport { PROFILE_PAGE_POSTS_LIMIT } from 'constants/DataLimit';\n\nimport { GET_USER_POSTS } from 'graphql/user';\n\nimport * as Routes from 'routes';\n\n/**\n * Renders posts in profile page\n */\nconst ProfilePosts = ({ username }) => {\n  const [isPostPopupOpen, setIsPostPopupOpen] = useState(false);\n  const [modalPostId, setModalPostId] = useState('');\n\n  const openModal = postId => {\n    window.history.pushState('', '', generatePath(Routes.POST, { id: postId }));\n    setModalPostId(postId);\n    setIsPostPopupOpen(true);\n  };\n\n  const closeModal = () => {\n    window.history.pushState(\n      '',\n      '',\n      generatePath(Routes.USER_PROFILE, { username })\n    );\n    setIsPostPopupOpen(false);\n  };\n\n  const variables = { username, skip: 0, limit: PROFILE_PAGE_POSTS_LIMIT };\n\n  return (\n    <Query\n      query={GET_USER_POSTS}\n      variables={variables}\n      notifyOnNetworkStatusChange\n    >\n      {({ data, loading, fetchMore, networkStatus }) => {\n        if (loading && networkStatus === 1) {\n          return (\n            <Skeleton\n              height={500}\n              bottom=\"lg\"\n              top=\"lg\"\n              count={PROFILE_PAGE_POSTS_LIMIT}\n            />\n          );\n        }\n\n        const { posts, count } = data.getUserPosts;\n\n        if (!posts.length > 0) {\n          return (\n            <Spacing bottom=\"lg\">\n              <Empty text=\"No posts yet.\" />\n            </Spacing>\n          );\n        }\n\n        return (\n          <InfiniteScroll\n            data={posts}\n            dataKey=\"getUserPosts.posts\"\n            count={parseInt(count)}\n            variables={variables}\n            fetchMore={fetchMore}\n          >\n            {data => {\n              return data.map((post, i) => {\n                const showNextLoading =\n                  loading && networkStatus === 3 && data.length - 1 === i;\n\n                return (\n                  <Fragment key={post.id}>\n                    {modalPostId === post.id && (\n                      <Modal open={isPostPopupOpen} onClose={closeModal}>\n                        <PostPopup id={post.id} closeModal={closeModal} />\n                      </Modal>\n                    )}\n\n                    <Spacing bottom=\"lg\">\n                      <PostCard\n                        author={post.author}\n                        postId={post.id}\n                        imagePublicId={post.imagePublicId}\n                        comments={post.comments}\n                        title={post.title}\n                        image={post.image}\n                        likes={post.likes}\n                        createdAt={post.createdAt}\n                        openModal={() => openModal(post.id)}\n                      />\n                    </Spacing>\n\n                    {showNextLoading && <Loading top=\"lg\" />}\n                  </Fragment>\n                );\n              });\n            }}\n          </InfiniteScroll>\n        );\n      }}\n    </Query>\n  );\n};\n\nProfilePosts.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nexport default ProfilePosts;\n"]},"metadata":{},"sourceType":"module"}