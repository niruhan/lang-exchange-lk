{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/niruhan/MSc/source_code/new/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject14() {\n  var data = _taggedTemplateLiteral([\"\\n  subscription($authUserId: ID!, $userId: ID!) {\\n    isUserOnline(authUserId: $authUserId, userId: $userId) {\\n      userId\\n      isOnline\\n    }\\n  }\\n\"]);\n\n  _templateObject14 = function _templateObject14() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n  query($authUserId: ID!) {\\n    getConversations(authUserId: $authUserId) {\\n      id\\n      username\\n      fullName\\n      image\\n      isOnline\\n      seen\\n      lastMessage\\n      lastMessageSender\\n      lastMessageCreatedAt\\n    }\\n  }\\n\"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n  query($userId: String!) {\\n    suggestPeople(userId: $userId) {\\n      id\\n      fullName\\n      username\\n      image\\n    }\\n  }\\n\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($input: ResetPasswordInput!) {\\n    resetPassword(input: $input) {\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  query($email: String!, $token: String!) {\\n    verifyResetPasswordToken(email: $email, token: $token) {\\n      message\\n    }\\n  }\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($input: RequestPasswordResetInput!) {\\n    requestPasswordReset(input: $input) {\\n      message\\n    }\\n  }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($input: SignInInput!) {\\n    signin(input: $input) {\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($input: SignUpInput!) {\\n    signup(input: $input) {\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation($input: UploadUserPhotoInput!) {\\n    uploadUserPhoto(input: $input) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  query($searchQuery: String!) {\\n    searchUsers(searchQuery: $searchQuery) {\\n      id\\n      fullName\\n      username\\n      image\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  query($userId: String!, $skip: Int, $limit: Int) {\\n    getUsers(userId: $userId, skip: $skip, limit: $limit) {\\n      count\\n      users {\\n        id\\n        fullName\\n        username\\n        image\\n        following {\\n          id\\n          user\\n        }\\n        followers {\\n          id\\n        }\\n        notifications {\\n          id\\n          author {\\n            id\\n            username\\n          }\\n          follow {\\n            id\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query {\\n    getAuthUser {\\n      \", \"\\n      newNotifications {\\n        id\\n        createdAt\\n        author {\\n          id\\n          fullName\\n          username\\n          image\\n        }\\n        follow {\\n          id\\n        }\\n        comment {\\n          id\\n          post {\\n            id\\n            image\\n          }\\n        }\\n        like {\\n          id\\n          post {\\n            id\\n            image\\n          }\\n        }\\n      }\\n      newConversations {\\n        id\\n        username\\n        fullName\\n        image\\n        lastMessage\\n        lastMessageCreatedAt\\n      }\\n      likes {\\n        id\\n        user\\n        post\\n      }\\n      posts {\\n        id\\n      }\\n      following {\\n        id\\n        user\\n      }\\n      followers {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query($username: String!, $skip: Int, $limit: Int) {\\n    getUserPosts(username: $username, skip: $skip, limit: $limit) {\\n      count\\n      posts {\\n        id\\n        title\\n        image\\n        imagePublicId\\n        createdAt\\n        \", \"\\n        \", \"\\n        \", \"\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($username: String, $id: ID) {\\n    getUser(username: $username, id: $id) {\\n      \", \"\\n      isOnline\\n      posts {\\n        id\\n      }\\n      following {\\n        id\\n      }\\n      followers {\\n        id\\n      }\\n      notifications {\\n        id\\n        author {\\n          id\\n          username\\n        }\\n        follow {\\n          id\\n        }\\n        like {\\n          id\\n        }\\n        comment {\\n          id\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { postCommentsPayload, postAuthorPayload, postLikesPayload } from './post';\n/**\n * Records to select from user\n */\n\nvar userPayload = \"\\n  id\\n  username\\n  email\\n  fullName\\n  image\\n  imagePublicId\\n  coverImage\\n  coverImagePublicId\\n  createdAt\\n\";\n/**\n * Gets specific user by username\n */\n\nexport var GET_USER = gql(_templateObject(), userPayload);\n/**\n * Gets user posts\n */\n\nexport var GET_USER_POSTS = gql(_templateObject2(), postAuthorPayload, postCommentsPayload, postLikesPayload);\n/**\n * Gets authenticated user\n */\n\nexport var GET_AUTH_USER = gql(_templateObject3(), userPayload);\n/**\n * Gets all available users\n */\n\nexport var GET_USERS = gql(_templateObject4());\n/**\n * Searches users by username or fullName\n */\n\nexport var SEARCH_USERS = gql(_templateObject5());\n/**\n * Uploads user photo\n */\n\nexport var UPLOAD_PHOTO = gql(_templateObject6());\n/**\n * Sign up user\n */\n\nexport var SIGN_UP = gql(_templateObject7());\n/**\n * Sign in user\n */\n\nexport var SIGN_IN = gql(_templateObject8());\n/**\n * Request reset password\n */\n\nexport var REQUEST_PASSWORD_RESET = gql(_templateObject9());\n/**\n * Verify reset password token\n */\n\nexport var VERIFY_RESET_PASSWORD_TOKEN = gql(_templateObject10());\n/**\n * Reset password\n */\n\nexport var RESET_PASSWORD = gql(_templateObject11());\n/**\n * People suggestions for auth user\n */\n\nexport var USER_SUGGESTIONS = gql(_templateObject12());\n/**\n * Get users with whom authUser had a conversation\n */\n\nexport var GET_CONVERSATIONS = gql(_templateObject13());\n/**\n * Checks if user is online in real time\n */\n\nexport var IS_USER_ONLINE_SUBSCRIPTION = gql(_templateObject14());","map":{"version":3,"sources":["/Users/niruhan/MSc/source_code/new/lang-exchange-lk/frontend/src/graphql/user.js"],"names":["gql","postCommentsPayload","postAuthorPayload","postLikesPayload","userPayload","GET_USER","GET_USER_POSTS","GET_AUTH_USER","GET_USERS","SEARCH_USERS","UPLOAD_PHOTO","SIGN_UP","SIGN_IN","REQUEST_PASSWORD_RESET","VERIFY_RESET_PASSWORD_TOKEN","RESET_PASSWORD","USER_SUGGESTIONS","GET_CONVERSATIONS","IS_USER_ONLINE_SUBSCRIPTION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,gBAHF,QAIO,QAJP;AAMA;;;;AAGA,IAAMC,WAAW,yHAAjB;AAYA;;;;AAGA,OAAO,IAAMC,QAAQ,GAAGL,GAAH,oBAGbI,WAHa,CAAd;AAkCP;;;;AAGA,OAAO,IAAME,cAAc,GAAGN,GAAH,qBAUjBE,iBAViB,EAWjBD,mBAXiB,EAYjBE,gBAZiB,CAApB;AAkBP;;;;AAGA,OAAO,IAAMI,aAAa,GAAGP,GAAH,qBAGlBI,WAHkB,CAAnB;AA0DP;;;;AAGA,OAAO,IAAMI,SAAS,GAAGR,GAAH,oBAAf;AA+BP;;;;AAGA,OAAO,IAAMS,YAAY,GAAGT,GAAH,oBAAlB;AAWP;;;;AAGA,OAAO,IAAMU,YAAY,GAAGV,GAAH,oBAAlB;AAQP;;;;AAGA,OAAO,IAAMW,OAAO,GAAGX,GAAH,oBAAb;AAQP;;;;AAGA,OAAO,IAAMY,OAAO,GAAGZ,GAAH,oBAAb;AAQP;;;;AAGA,OAAO,IAAMa,sBAAsB,GAAGb,GAAH,oBAA5B;AAQP;;;;AAGA,OAAO,IAAMc,2BAA2B,GAAGd,GAAH,qBAAjC;AAQP;;;;AAGA,OAAO,IAAMe,cAAc,GAAGf,GAAH,qBAApB;AAQP;;;;AAGA,OAAO,IAAMgB,gBAAgB,GAAGhB,GAAH,qBAAtB;AAWP;;;;AAGA,OAAO,IAAMiB,iBAAiB,GAAGjB,GAAH,qBAAvB;AAgBP;;;;AAGA,OAAO,IAAMkB,2BAA2B,GAAGlB,GAAH,qBAAjC","sourcesContent":["import gql from 'graphql-tag';\nimport {\n  postCommentsPayload,\n  postAuthorPayload,\n  postLikesPayload,\n} from './post';\n\n/**\n * Records to select from user\n */\nconst userPayload = `\n  id\n  username\n  email\n  fullName\n  image\n  imagePublicId\n  coverImage\n  coverImagePublicId\n  createdAt\n`;\n\n/**\n * Gets specific user by username\n */\nexport const GET_USER = gql`\n  query($username: String, $id: ID) {\n    getUser(username: $username, id: $id) {\n      ${userPayload}\n      isOnline\n      posts {\n        id\n      }\n      following {\n        id\n      }\n      followers {\n        id\n      }\n      notifications {\n        id\n        author {\n          id\n          username\n        }\n        follow {\n          id\n        }\n        like {\n          id\n        }\n        comment {\n          id\n        }\n      }\n    }\n  }\n`;\n\n/**\n * Gets user posts\n */\nexport const GET_USER_POSTS = gql`\n  query($username: String!, $skip: Int, $limit: Int) {\n    getUserPosts(username: $username, skip: $skip, limit: $limit) {\n      count\n      posts {\n        id\n        title\n        image\n        imagePublicId\n        createdAt\n        ${postAuthorPayload}\n        ${postCommentsPayload}\n        ${postLikesPayload}\n      }\n    }\n  }\n`;\n\n/**\n * Gets authenticated user\n */\nexport const GET_AUTH_USER = gql`\n  query {\n    getAuthUser {\n      ${userPayload}\n      newNotifications {\n        id\n        createdAt\n        author {\n          id\n          fullName\n          username\n          image\n        }\n        follow {\n          id\n        }\n        comment {\n          id\n          post {\n            id\n            image\n          }\n        }\n        like {\n          id\n          post {\n            id\n            image\n          }\n        }\n      }\n      newConversations {\n        id\n        username\n        fullName\n        image\n        lastMessage\n        lastMessageCreatedAt\n      }\n      likes {\n        id\n        user\n        post\n      }\n      posts {\n        id\n      }\n      following {\n        id\n        user\n      }\n      followers {\n        id\n      }\n    }\n  }\n`;\n\n/**\n * Gets all available users\n */\nexport const GET_USERS = gql`\n  query($userId: String!, $skip: Int, $limit: Int) {\n    getUsers(userId: $userId, skip: $skip, limit: $limit) {\n      count\n      users {\n        id\n        fullName\n        username\n        image\n        following {\n          id\n          user\n        }\n        followers {\n          id\n        }\n        notifications {\n          id\n          author {\n            id\n            username\n          }\n          follow {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * Searches users by username or fullName\n */\nexport const SEARCH_USERS = gql`\n  query($searchQuery: String!) {\n    searchUsers(searchQuery: $searchQuery) {\n      id\n      fullName\n      username\n      image\n    }\n  }\n`;\n\n/**\n * Uploads user photo\n */\nexport const UPLOAD_PHOTO = gql`\n  mutation($input: UploadUserPhotoInput!) {\n    uploadUserPhoto(input: $input) {\n      id\n    }\n  }\n`;\n\n/**\n * Sign up user\n */\nexport const SIGN_UP = gql`\n  mutation($input: SignUpInput!) {\n    signup(input: $input) {\n      token\n    }\n  }\n`;\n\n/**\n * Sign in user\n */\nexport const SIGN_IN = gql`\n  mutation($input: SignInInput!) {\n    signin(input: $input) {\n      token\n    }\n  }\n`;\n\n/**\n * Request reset password\n */\nexport const REQUEST_PASSWORD_RESET = gql`\n  mutation($input: RequestPasswordResetInput!) {\n    requestPasswordReset(input: $input) {\n      message\n    }\n  }\n`;\n\n/**\n * Verify reset password token\n */\nexport const VERIFY_RESET_PASSWORD_TOKEN = gql`\n  query($email: String!, $token: String!) {\n    verifyResetPasswordToken(email: $email, token: $token) {\n      message\n    }\n  }\n`;\n\n/**\n * Reset password\n */\nexport const RESET_PASSWORD = gql`\n  mutation($input: ResetPasswordInput!) {\n    resetPassword(input: $input) {\n      token\n    }\n  }\n`;\n\n/**\n * People suggestions for auth user\n */\nexport const USER_SUGGESTIONS = gql`\n  query($userId: String!) {\n    suggestPeople(userId: $userId) {\n      id\n      fullName\n      username\n      image\n    }\n  }\n`;\n\n/**\n * Get users with whom authUser had a conversation\n */\nexport const GET_CONVERSATIONS = gql`\n  query($authUserId: ID!) {\n    getConversations(authUserId: $authUserId) {\n      id\n      username\n      fullName\n      image\n      isOnline\n      seen\n      lastMessage\n      lastMessageSender\n      lastMessageCreatedAt\n    }\n  }\n`;\n\n/**\n * Checks if user is online in real time\n */\nexport const IS_USER_ONLINE_SUBSCRIPTION = gql`\n  subscription($authUserId: ID!, $userId: ID!) {\n    isUserOnline(authUserId: $authUserId, userId: $userId) {\n      userId\n      isOnline\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}