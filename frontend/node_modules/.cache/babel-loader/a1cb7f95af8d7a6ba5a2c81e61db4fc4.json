{"ast":null,"code":"import _slicedToArray from \"/Users/niruhan/MSc/source_code/new/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/niruhan/MSc/source_code/new/lang-exchange-lk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/niruhan/MSc/source_code/new/lang-exchange-lk/frontend/src/pages/People/People.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, minmax(180px, 3fr));\\n  grid-auto-rows: auto;\\n  grid-gap: 20px;\\n  margin-bottom: \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-top: \", \";\\n\\n  @media (min-width: \", \") {\\n    margin-left: \", \";\\n    padding: 0;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport { Container } from 'components/Layout';\nimport Skeleton from 'components/Skeleton';\nimport { Loading } from 'components/Loading';\nimport Empty from 'components/Empty';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Head from 'components/Head';\nimport PeopleCard from './PeopleCard';\nimport { GET_USERS } from 'graphql/user';\nimport { PEOPLE_PAGE_USERS_LIMIT } from 'constants/DataLimit';\nimport { useStore } from 'store';\nimport { Query } from 'react-apollo';\nvar Root = styled(Container)(_templateObject(), function (p) {\n  return p.theme.spacing.lg;\n}, function (p) {\n  return p.theme.screen.lg;\n}, function (p) {\n  return p.theme.spacing.lg;\n});\nvar PeopleContainer = styled.div(_templateObject2(), function (p) {\n  return p.theme.spacing.lg;\n});\n/**\n * People page\n */\n\nvar People = function People() {\n  var _useStore = useStore(),\n      _useStore2 = _slicedToArray(_useStore, 1),\n      auth = _useStore2[0].auth;\n\n  var variables = {\n    userId: auth.user.id,\n    skip: 0,\n    limit: PEOPLE_PAGE_USERS_LIMIT\n  };\n  return React.createElement(Root, {\n    maxWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Head, {\n    title: \"Find new People\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(Query, {\n    query: GET_USERS,\n    variables: variables,\n    notifyOnNetworkStatusChange: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        fetchMore = _ref.fetchMore,\n        networkStatus = _ref.networkStatus;\n\n    if (loading && networkStatus === 1) {\n      return React.createElement(PeopleContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Skeleton, {\n        height: 280,\n        count: PEOPLE_PAGE_USERS_LIMIT,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }));\n    }\n\n    var _data$getUsers = data.getUsers,\n        users = _data$getUsers.users,\n        count = _data$getUsers.count;\n    if (!users.length > 0) return React.createElement(Empty, {\n      text: \"No people yet.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    });\n    return React.createElement(InfiniteScroll, {\n      data: users,\n      dataKey: \"getUsers.users\",\n      count: parseInt(count),\n      variables: variables,\n      fetchMore: fetchMore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, function (data) {\n      var showNextLoading = loading && networkStatus === 3 && count !== data.length;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(PeopleContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, data.map(function (user) {\n        return React.createElement(PeopleCard, {\n          key: user.id,\n          user: user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n      })), showNextLoading && React.createElement(Loading, {\n        top: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }));\n    });\n  }));\n};\n\nexport default People;","map":{"version":3,"sources":["/Users/niruhan/MSc/source_code/new/lang-exchange-lk/frontend/src/pages/People/People.js"],"names":["React","Fragment","styled","Container","Skeleton","Loading","Empty","InfiniteScroll","Head","PeopleCard","GET_USERS","PEOPLE_PAGE_USERS_LIMIT","useStore","Query","Root","p","theme","spacing","lg","screen","PeopleContainer","div","People","auth","variables","userId","user","id","skip","limit","data","loading","fetchMore","networkStatus","getUsers","users","count","length","parseInt","showNextLoading","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,uBAAT,QAAwC,qBAAxC;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,SAASC,KAAT,QAAsB,cAAtB;AAEA,IAAMC,IAAI,GAAGZ,MAAM,CAACC,SAAD,CAAT,oBACM,UAAAY,CAAC;AAAA,SAAIA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAApB;AAAA,CADP,EAGa,UAAAH,CAAC;AAAA,SAAIA,CAAC,CAACC,KAAF,CAAQG,MAAR,CAAeD,EAAnB;AAAA,CAHd,EAIS,UAAAH,CAAC;AAAA,SAAIA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAApB;AAAA,CAJV,CAAV;AASA,IAAME,eAAe,GAAGlB,MAAM,CAACmB,GAAV,qBAKF,UAAAN,CAAC;AAAA,SAAIA,CAAC,CAACC,KAAF,CAAQC,OAAR,CAAgBC,EAApB;AAAA,CALC,CAArB;AAQA;;;;AAGA,IAAMI,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA,kBACAV,QAAQ,EADR;AAAA;AAAA,MACVW,IADU,iBACVA,IADU;;AAEnB,MAAMC,SAAS,GAAG;AAChBC,IAAAA,MAAM,EAAEF,IAAI,CAACG,IAAL,CAAUC,EADF;AAEhBC,IAAAA,IAAI,EAAE,CAFU;AAGhBC,IAAAA,KAAK,EAAElB;AAHS,GAAlB;AAMA,SACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAC,iBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAED,SADT;AAEE,IAAA,SAAS,EAAEc,SAFb;AAGE,IAAA,2BAA2B,MAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,gBAAiD;AAAA,QAA9CM,IAA8C,QAA9CA,IAA8C;AAAA,QAAxCC,OAAwC,QAAxCA,OAAwC;AAAA,QAA/BC,SAA+B,QAA/BA,SAA+B;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;;AAChD,QAAIF,OAAO,IAAIE,aAAa,KAAK,CAAjC,EAAoC;AAClC,aACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,GAAlB;AAAuB,QAAA,KAAK,EAAEtB,uBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;AAP+C,yBASvBmB,IAAI,CAACI,QATkB;AAAA,QASxCC,KATwC,kBASxCA,KATwC;AAAA,QASjCC,KATiC,kBASjCA,KATiC;AAWhD,QAAI,CAACD,KAAK,CAACE,MAAP,GAAgB,CAApB,EAAuB,OAAO,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,gBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEvB,WACE,oBAAC,cAAD;AACE,MAAA,IAAI,EAAEF,KADR;AAEE,MAAA,OAAO,EAAC,gBAFV;AAGE,MAAA,KAAK,EAAEG,QAAQ,CAACF,KAAD,CAHjB;AAIE,MAAA,SAAS,EAAEZ,SAJb;AAKE,MAAA,SAAS,EAAEQ,SALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,UAAAF,IAAI,EAAI;AACP,UAAMS,eAAe,GACnBR,OAAO,IAAIE,aAAa,KAAK,CAA7B,IAAkCG,KAAK,KAAKN,IAAI,CAACO,MADnD;AAGA,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGP,IAAI,CAACU,GAAL,CAAS,UAAAd,IAAI;AAAA,eACZ,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,UAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADY;AAAA,OAAb,CADH,CADF,EAOGa,eAAe,IAAI,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPtB,CADF;AAWD,KAtBH,CADF;AA0BD,GA5CH,CAHF,CADF;AAoDD,CA5DD;;AA8DA,eAAejB,MAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport styled from 'styled-components';\n\nimport { Container } from 'components/Layout';\nimport Skeleton from 'components/Skeleton';\nimport { Loading } from 'components/Loading';\nimport Empty from 'components/Empty';\nimport InfiniteScroll from 'components/InfiniteScroll';\nimport Head from 'components/Head';\nimport PeopleCard from './PeopleCard';\n\nimport { GET_USERS } from 'graphql/user';\n\nimport { PEOPLE_PAGE_USERS_LIMIT } from 'constants/DataLimit';\n\nimport { useStore } from 'store';\n\nimport { Query } from 'react-apollo';\n\nconst Root = styled(Container)`\n  margin-top: ${p => p.theme.spacing.lg};\n\n  @media (min-width: ${p => p.theme.screen.lg}) {\n    margin-left: ${p => p.theme.spacing.lg};\n    padding: 0;\n  }\n`;\n\nconst PeopleContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 3fr));\n  grid-auto-rows: auto;\n  grid-gap: 20px;\n  margin-bottom: ${p => p.theme.spacing.lg};\n`;\n\n/**\n * People page\n */\nconst People = () => {\n  const [{ auth }] = useStore();\n  const variables = {\n    userId: auth.user.id,\n    skip: 0,\n    limit: PEOPLE_PAGE_USERS_LIMIT,\n  };\n\n  return (\n    <Root maxWidth=\"md\">\n      <Head title=\"Find new People\" />\n\n      <Query\n        query={GET_USERS}\n        variables={variables}\n        notifyOnNetworkStatusChange\n      >\n        {({ data, loading, fetchMore, networkStatus }) => {\n          if (loading && networkStatus === 1) {\n            return (\n              <PeopleContainer>\n                <Skeleton height={280} count={PEOPLE_PAGE_USERS_LIMIT} />\n              </PeopleContainer>\n            );\n          }\n\n          const { users, count } = data.getUsers;\n\n          if (!users.length > 0) return <Empty text=\"No people yet.\" />;\n\n          return (\n            <InfiniteScroll\n              data={users}\n              dataKey=\"getUsers.users\"\n              count={parseInt(count)}\n              variables={variables}\n              fetchMore={fetchMore}\n            >\n              {data => {\n                const showNextLoading =\n                  loading && networkStatus === 3 && count !== data.length;\n\n                return (\n                  <Fragment>\n                    <PeopleContainer>\n                      {data.map(user => (\n                        <PeopleCard key={user.id} user={user} />\n                      ))}\n                    </PeopleContainer>\n\n                    {showNextLoading && <Loading top=\"lg\" />}\n                  </Fragment>\n                );\n              }}\n            </InfiniteScroll>\n          );\n        }}\n      </Query>\n    </Root>\n  );\n};\n\nexport default People;\n"]},"metadata":{},"sourceType":"module"}