{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable, split } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { WebSocketLink } from 'apollo-link-ws';\n/**\n * Creates a Apollo Link, that adds authentication token to request\n */\n\nvar createAuthLink = function createAuthLink() {\n  var request = function request(operation) {\n    var token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token\n      }\n    });\n  };\n\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var handle;\n      Promise.resolve(operation).then(function (oper) {\n        return request(oper);\n      }).then(function () {\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n};\n/**\n * Helper functions that handles error cases\n */\n\n\nvar handleErrors = function handleErrors() {\n  return onError(function (_ref) {\n    var graphQLErrors = _ref.graphQLErrors,\n        networkError = _ref.networkError;\n\n    if (graphQLErrors) {\n      console.log('graphQLErrors', graphQLErrors);\n    }\n\n    if (networkError) {\n      console.log('networkError', networkError);\n    }\n  });\n};\n/**\n * Creates a Apollo Client\n *\n * @param {string} apiUrl, GraphQL api url\n * @param {string} websocketApiUrl, GraphQL WebSocket api url\n */\n\n\nexport var createApolloClient = function createApolloClient(apiUrl, websocketApiUrl) {\n  var cache = new InMemoryCache();\n  var errorLink = handleErrors();\n  var authLink = createAuthLink();\n  var uploadLink = createUploadLink({\n    uri: apiUrl\n  }); // Upload link also creates an HTTP link\n  // Create WebSocket link\n\n  var authToken = localStorage.getItem('token');\n  var wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      timeout: 60000,\n      reconnect: true,\n      connectionParams: {\n        authorization: authToken\n      }\n    }\n  }); // Temporary fix for early websocket closure resulting in websocket connections not being instantiated\n  // https://github.com/apollographql/subscriptions-transport-ws/issues/377\n\n  wsLink.subscriptionClient.maxConnectTimeGenerator.duration = function () {\n    return wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n  }; // Split links, so we can send data to each link\n  // depending on what kind of operation is being sent\n\n\n  var terminatingLink = split(function (_ref2) {\n    var query = _ref2.query;\n\n    var _getMainDefinition = getMainDefinition(query),\n        kind = _getMainDefinition.kind,\n        operation = _getMainDefinition.operation;\n\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  }, wsLink, uploadLink);\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache: cache\n  });\n};","map":{"version":3,"sources":["/Users/niruhan/MSc/source_code/new/lang-exchange-lk/frontend/src/utils/apollo-client.js"],"names":["ApolloClient","InMemoryCache","onError","ApolloLink","Observable","split","createUploadLink","getMainDefinition","WebSocketLink","createAuthLink","request","operation","token","localStorage","getItem","setContext","headers","authorization","forward","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","handleErrors","graphQLErrors","networkError","console","log","createApolloClient","apiUrl","websocketApiUrl","cache","errorLink","authLink","uploadLink","uri","authToken","wsLink","options","timeout","reconnect","connectionParams","subscriptionClient","maxConnectTimeGenerator","duration","max","terminatingLink","query","kind","link","from"],"mappings":"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","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\nimport { ApolloLink, Observable, split } from 'apollo-link';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { WebSocketLink } from 'apollo-link-ws';\n\n/**\n * Creates a Apollo Link, that adds authentication token to request\n */\nconst createAuthLink = () => {\n  const request = operation => {\n    const token = localStorage.getItem('token');\n    operation.setContext({\n      headers: {\n        authorization: token,\n      },\n    });\n  };\n\n  return new ApolloLink(\n    (operation, forward) =>\n      new Observable(observer => {\n        let handle;\n        Promise.resolve(operation)\n          .then(oper => request(oper))\n          .then(() => {\n            handle = forward(operation).subscribe({\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer),\n            });\n          })\n          .catch(observer.error.bind(observer));\n\n        return () => {\n          if (handle) handle.unsubscribe();\n        };\n      })\n  );\n};\n\n/**\n * Helper functions that handles error cases\n */\nconst handleErrors = () => {\n  return onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      console.log('graphQLErrors', graphQLErrors);\n    }\n    if (networkError) {\n      console.log('networkError', networkError);\n    }\n  });\n};\n\n/**\n * Creates a Apollo Client\n *\n * @param {string} apiUrl, GraphQL api url\n * @param {string} websocketApiUrl, GraphQL WebSocket api url\n */\nexport const createApolloClient = (apiUrl, websocketApiUrl) => {\n  const cache = new InMemoryCache();\n\n  const errorLink = handleErrors();\n  const authLink = createAuthLink();\n  const uploadLink = createUploadLink({ uri: apiUrl }); // Upload link also creates an HTTP link\n\n  // Create WebSocket link\n  const authToken = localStorage.getItem('token');\n  const wsLink = new WebSocketLink({\n    uri: websocketApiUrl,\n    options: {\n      timeout: 60000,\n      reconnect: true,\n      connectionParams: {\n        authorization: authToken,\n      },\n    },\n  });\n\n  // Temporary fix for early websocket closure resulting in websocket connections not being instantiated\n  // https://github.com/apollographql/subscriptions-transport-ws/issues/377\n  wsLink.subscriptionClient.maxConnectTimeGenerator.duration = () =>\n    wsLink.subscriptionClient.maxConnectTimeGenerator.max;\n\n  // Split links, so we can send data to each link\n  // depending on what kind of operation is being sent\n  const terminatingLink = split(\n    ({ query }) => {\n      const { kind, operation } = getMainDefinition(query);\n      return kind === 'OperationDefinition' && operation === 'subscription';\n    },\n    wsLink,\n    uploadLink\n  );\n\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, authLink, terminatingLink]),\n    cache,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}